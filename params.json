{"name":"Shrdlite-template","tagline":"The Shrdlite programming project is a programming project in Artificial Intelligence, a course given at the University of Gothenburg and Chalmers University of Technology","body":"The Shrdlite programming project\r\n================================\r\n\r\nShrdlite is a programming project in Artificial Intelligence, a course given \r\nat the University of Gothenburg and Chalmers University of Technology.\r\nFor more information, see the course webpages:\r\n\r\n- <http://www.cse.chalmers.se/edu/course/TIN172/>\r\n\r\nThe goal of the project is to create an interpreter and a planner so that\r\na person can control a robot in a blocks world to move around objects,\r\nby giving commands in natural language.\r\n\r\nTo make the project more interesting, there is a web-based graphical \r\ninterface from which the user can interact with the blocks world.\r\nThe interface is written in Javascript and SVG, and it communicates with\r\nthe natural language parser, interpreter and planner via Ajax CGI.\r\n\r\nThe natural language grammar and parser are already given, in four different\r\nformats, and can be used from at least four different programming languages:\r\n\r\n- Prolog DCG: \r\n  This grammar can be used as is from any standard compliant Prolog, \r\n  but also from Java via the GNUPrologJava library.\r\n  \r\n- Python NLTK grammar: \r\n  This grammar is written using the NLTK library, and can be used \r\n  from within Python.\r\n  \r\n- Haskell combinator parser: \r\n  The grammar is written as parser combinators, and can be used \r\n  in a Haskell program.\r\n\r\n- Grammatical Framework: \r\n  This grammar formalism has bindings to C/C++ and Python.\r\n\r\nLocal web server\r\n----------------\r\n\r\nTo be able to run the graphical interface you need a web server. On Linux\r\nor Mac, there are no direct problems -- in fact, Mac comes preinstalled with\r\nthe Apache server. But on Windows you have to install something.\r\n\r\nThe local web server that these files are using is Python's built-in web\r\nserver. To start it, just run\r\n\r\n    python -m CGIHTTPServer 8000\r\n\r\nfrom the same directory as the file `shrdlite.html`. Now let the web\r\nserver keep running and browse to any of these addresses:\r\n\r\n- <http://localhost:8000/shrdlite.html>\r\n- <http://127.0.0.1:8000/shrdlite.html>\r\n- <http://0.0.0.0:8000/shrdlite.html>\r\n\r\nHow it works\r\n------------\r\n\r\nThe graphical interface is written in SVG and Javascript in the file \r\n`shrdlite.js`. The first 20 lines of the file contain some constants \r\nthat you can experiment with. Otherwise it shouldn't be necessary to \r\nread or understand the Javscript code, if you don't want to.\r\n\r\nWhen the user enters an utterance, the Javascript calls the Ajax CGI script \r\n`ajaxwrapper.py` with information about the current world and the user's\r\nutterance. The wrapper script calls another command line program, which\r\nis the one that you will be writing.\r\n\r\nCurrently there are four possible alternatives for the command line program:\r\n\r\n- `javaprolog/shrdlite.pl`, written in SWI Prolog\r\n- `javaprolog/Shrdlite.java`, written in Java\r\n- `haskell/Shrdlite.hs`, written in Haskell\r\n- `python/shrdlite.py`, written in Python\r\n\r\nJust uncomment the appropriate definitions of `SCRIPTDIR` and `SCRIPT` \r\nin `ajaxwrapper.py`, and you should be ready to go.\r\n\r\nSpeech synthesis\r\n-----------------\r\n\r\nThe latest versions of Safari (v6.1 or later) and Chrome (v33 or later) \r\nhave implemented the W3C Web Speech API. Shrdlite uses this if possible!\r\n\r\n- <https://dvcs.w3.org/hg/speech-api/raw-file/tip/speechapi.html>\r\n- <http://www.broken-links.com/2013/09/20/web-speech-api-part-one-speech-synthesis>\r\n\r\n\r\nAlternative webserver\r\n---------------------\r\n\r\nIf you want to use another webserver (such as the built-in Apache on a Mac), \r\nthen you might have to modify some files:\r\n\r\n- Some webservers only allow CGI scripts with file suffix \".cgi\":\r\n\r\n    + Try to rename `cgi-bin/ajaxwrapper.py` to `cgi-bin/ajaxwrapper.py.cgi`\r\n      (and edit `shrdlite.js` accordingly)\r\n\r\n- Some webservers require that CGI scripts are in a certain directory:\r\n\r\n    + Try to rename the `cgi-bin` directory, or move `ajaxwrapper.py`\r\n      to the directory above (and edit `shrdlite.js` accordingly)\r\n\r\n- The program that `ajaxwrapper.py` calls might need another path:\r\n\r\n    + Try to replace the first argument of the `SCRIPT` variable in\r\n      `ajaxwrapper.py`, e.g., `/usr/bin/python` with `/usr/local/bin/python`\r\n\r\nThe command line program\r\n------------------------\r\n\r\nThe command line program takes JSON input and should produce JSON output.\r\nThe input JSON contains the following fields:\r\n\r\n- \"utterance\": a list of words (strings)\r\n- \"holding\": an object identifier (string) or `null`\r\n- \"world\": a list of list of object identifiers (strings)\r\n- \"objects\": a mapping from object identifiers to information about them\r\n\r\nThe output JSON should contain at least the following:\r\n\r\n- \"output\": a system utterance (string)\r\n- \"plan\": a list of actions (strings)\r\n\r\nIt can also contain the fields \"utterance\", \"trees\" and \"goals\", but they \r\nare only used for printing debug information.\r\n\r\nGrammars\r\n--------\r\n\r\nAll four given command line programs have include a grammar and a parser,\r\nwhich means that you do not have to implement parsing. \r\n(If you don't want to modify the grammar of course).\r\n\r\nThere are Shrdlite grammars that can be used in several different\r\nprogramming languages.\r\n\r\n### GF (Grammatical Framework)\r\n\r\nTo use this grammar you need to install GF, \r\nsee instructions at <http://www.grammaticalframework.org>.\r\n\r\nThere are two grammar files, `ShrdliteGrammar.gf` (the abstract syntax) \r\nand `ShrdliteGrammarEng.gf` (the English translations). \r\n\r\nHere is an example run from within the GF runtime:\r\n\r\n    > i ShrdliteGrammarEng.gf\r\n    ShrdliteGrammar> p \"put the white ball in a box on the floor\"\r\n    move (basic_entity the (object ball ?3 white)) (relative inside (relative_entity any (object box ?10 ?11) (relative ontop floor)))\r\n    move (relative_entity the (object ball ?3 white) (relative inside (basic_entity any (object box ?9 ?10)))) (relative ontop floor)\r\n\r\nThis grammar is not used in any of the command line programs, but there\r\nare GF bindings for C/C++, Haskell and Python.\r\n\r\n### Python (with NLTK)\r\n\r\nTo use this grammar you need to install Python and NLTK,\r\nsee instructions here:\r\n\r\n- <http://www.python.org/> (only if you have Windows)\r\n- <http://www.nltk.org/>\r\n\r\nThere is one grammar file, `shrdlite_grammar.fcfg`, which can be used like this:\r\n\r\n    >>> import nltk\r\n    >>> grammar = nltk.data.load(\"file:shrdlite_grammar.fcfg\", cache=False)\r\n    >>> parser = nltk.FeatureChartParser(grammar)\r\n    >>> sentence = \"put the white ball in a box on the floor\".split()\r\n    >>> for tree in parser.nbest_parse(sentence): \r\n    ...     print tree.label()['sem']\r\n    (move, (basic_entity, the, (object, ball, -, white)), (relative, inside, (relative_entity, any, (object, box, -, -), (relative, ontop, floor))))\r\n    (move, (relative_entity, the, (object, ball, -, white), (relative, inside, (basic_entity, any, (object, box, -, -)))), (relative, ontop, floor))\r\n\r\nTo test the command line program `shrdlite.py`, you can do this:\r\n\r\n    python shrdlite.py < ../examples/medium.json\r\n\r\n*Note:* NLTK version 2.0b9 (which is the one that is installed by the Ubuntu package\r\nmanager) contains an error in `nltk.FeatureChartParser`! If you have this version,\r\nplease use `nltk.FeatureTopDownChartParser` instead.\r\n\r\n### Prolog\r\n\r\nThere is one grammar file, `shrdlite_grammar.pl`, and one parser file\r\n`dcg_parser.pl`. They should be usable in most Prologs:\r\n\r\n    ?- [shrdlite_grammar, dcg_parser].\r\n    ?- parse(command, [put,the,white,ball,in,a,box,on,the,floor], Tree).\r\n    Tree = move(basic_entity(the, object(ball, -, white)), relative(inside, relative_entity(any, object(box, -, -), relative(ontop, floor)))) ;\r\n    Tree = move(relative_entity(the, object(ball, -, white), relative(inside, basic_entity(any, object(box, -, -)))), relative(ontop, floor)) ;\r\n    No (more) solutions\r\n\r\nTo test the command line program `shrdlite.pl` in SWI Prolog, you should \r\nbe able to do this:\r\n\r\n    swipl -q -g main,halt -s shrdlite.pl < ../examples/medium.json\r\n\r\nMore information about SWI Prolog can found here: \r\n\r\n- <http://www.swi-prolog.org/>\r\n\r\n### Java\r\n\r\nThere are no good grammar libraries for Java, so this version uses the \r\nProlog grammar via the GNUPrologJava library. After compilation you can\r\ntest the command line program like this:\r\n\r\n    java -cp gnuprologjava-0.2.6.jar:json-simple-1.1.1.jar:. Shrdlite < ../examples/medium.json\r\n\r\nRead more about the needed libraries here:\r\n\r\n- <http://www.gnu.org/software/gnuprologjava/>\r\n- <http://code.google.com/p/json-simple/>\r\n\r\n### Haskell\r\n\r\nThe Haskell grammar is of course written as a combinator parser, \r\nimplemented as an *Applicative Functor* (McBride & Paterson, 2008).\r\n\r\n    Prelude> :l Shrdlite.hs\r\n    Main> let sent = words \"put the white ball in a box on the floor\"\r\n    Main> mapM_ print $ parse command sent\r\n    Move (BasicEntity The (Object AnySize White Ball)) (Relative Inside (RelativeEntity Any (Object AnySize AnyColor Box) (Relative Ontop Floor)))\r\n    Move (RelativeEntity The (Object AnySize White Ball) (Relative Inside (BasicEntity Any (Object AnySize AnyColor Box)))) (Relative Ontop Floor)\r\n\r\nTo test the command line program `Shrdlite.hs` just do this:\r\n\r\n    runhaskell Shrdlite.hs < ../examples/medium.json\r\n\r\nTo be able to read and write JSON, you have to install Text.JSON:\r\n\r\n- <http://hackage.haskell.org/package/json>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}